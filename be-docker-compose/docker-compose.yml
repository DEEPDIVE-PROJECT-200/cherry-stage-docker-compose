version: '3.8'

services:
  # 백엔드 서비스
  cherry-backend:
    image: ogu1208/cherry-be-dev:latest
    container_name: cherry-backend
    pull_policy: always
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      # 런타임에 환경변수 주입
      - JWT_SECRET=${JWT_SECRET}
      - ACCESS_TOKEN_EXPIRATION_SECONDS=${ACCESS_TOKEN_EXPIRATION_SECONDS:-600}
      - REFRESH_TOKEN_EXPIRATION_SECONDS=${REFRESH_TOKEN_EXPIRATION_SECONDS:-1209600}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID:-test_client_id}
      - KAKAO_REDIRECT_URL=${KAKAO_REDIRECT_URL:-http://localhost:8080/api/v1/auth/callback}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - cherry-network

  # MySQL 데이터베이스
  mysql:
    image: mysql:latest
    container_name: cherry-mysql
    environment:
      MYSQL_DATABASE: cherry
      MYSQL_USER: myuser
      MYSQL_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: verysecret
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "myuser", "-psecret"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - cherry-network

  # Redis
  redis:
    image: redis:latest
    container_name: cherry-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - cherry-network

volumes:
  mysql_data:
  redis_data:

networks:
  cherry-network:
    driver: bridge